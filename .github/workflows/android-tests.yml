name: Android Emulator Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  ANDROID_ARCH: arm64-v8a  # For M1/M2 Macs
  ANDROID_TARGET: google_apis  # Or google_apis_playstore if you need Play Store
  API_LEVEL: 33  # Stable API level
  EMULATOR_NAME: test-emulator
  EMULATOR_TIMEOUT: 300  # 5 minutes in seconds
  EMULATOR_MEMORY: 2048  # MB

jobs:
  android-tests:
    runs-on: macos-latest
    timeout-minutes: 35

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Android SDK
        run: |
          echo "ANDROID_HOME=$HOME/Library/Android/sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-${{ env.API_LEVEL }}" "system-images;android-${{ env.API_LEVEL }};${{ env.ANDROID_TARGET }};${{ env.ANDROID_ARCH }}" "emulator"

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd \
            --force \
            --name ${{ env.EMULATOR_NAME }} \
            --package "system-images;android-${{ env.API_LEVEL }};${{ env.ANDROID_TARGET }};${{ env.ANDROID_ARCH }}" \
            --device "pixel_5"

      - name: Start and wait for emulator
        timeout-minutes: 5
        run: |
          # Start emulator in background
          $ANDROID_HOME/emulator/emulator -avd ${{ env.EMULATOR_NAME }} \
            -no-audio \
            -no-window \
            -no-snapshot \
            -gpu swiftshader_indirect \
            -no-accel \
            -memory ${{ env.EMULATOR_MEMORY }} \
            -no-boot-anim &
          
          # Wait for device to be ready
          echo "Waiting for device..."
          adb wait-for-device
          
          # Wait for boot to complete with timeout
          echo "Waiting for boot completion..."
          start_time=$(date +%s)
          while true; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ "$boot_completed" = "1" ]; then
              echo "Boot completed!"
              break
            elif [ $elapsed -ge ${{ env.EMULATOR_TIMEOUT }} ]; then
              echo "Timeout reached while waiting for emulator to boot"
              exit 1
            fi
            
            echo "Waiting for boot... (${elapsed}s elapsed)"
            sleep 5
          done
          
          # Unlock screen
          adb shell input keyevent 82
          echo "Emulator is ready for testing"

      - name: Verify emulator
        run: |
          adb devices
          adb shell getprop ro.build.version.release

      - name: Install dependencies
        run: npm ci

      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install uiautomator2

      - name: Run WebDriverIO tests
        run: npx wdio run ./wdio.conf.js